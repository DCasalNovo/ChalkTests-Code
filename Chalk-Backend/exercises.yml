openapi: "3.0.3"
info:
  title: Chalk - Test Your Knowledge
  version: "1.0.0"
servers:
  - url: https://localhost:8080/v1/

tags:
  - name: exercises
    description: Everything related to exercises.

components:
  schemas:
    Visibility:
      type: string
      enum:
        - "public"
        - "not_listed"
        - "private"
        - "course"
        - "institution"
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        path:
          type: string
      example:
        name: "Álgebra"
        path: "/Matemática/"
    Comment: 
      type: object
      properties:
        items:
          type: array
          items:
            oneOf:
              - type: string

    #### Exercise schemas ####

    ExerciseBasicProperties:
      description: "Basic properties of an exercise."
      required:
        - title
        - type
        - institutionId
        - courseId
        - specialistId
        - statement
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
        cotation:
          type: number
          format: float
        institutionId:
          type: string
        courseId:
          type: string
        specialistId:
          type: string
        statement:
          type: object
          required:
            - text
            - imagePath
          properties:
            text:
              type: string
            imagePath:
              type: string
              example: "http://somewhere.com/canetasVerdes.jpg"
    MultipleChoiceExerciseWithoutId:
      description: "Multiple Choice or True/False exercise schema. The exercise id is not required."
      required:
        - mctype
        - items
      allOf:
        - $ref: "#/components/schemas/ExerciseBasicProperties"
        - type: object
          properties:
            type:
              enum:
                - "MC"
            mctype:
              type: integer
              description: |
                Defines the type of multiple choice exercise.
                Should follow the format "XX".
                Options:
                  1X -> multiple choice /
                  2X -> true or false / 
                  X0 means 'no justification' / 
                  X1 means 'justify all items' / 
                  X2 means 'justify false/unmarked items' / 
                  X3 means 'justify true/marked items'"
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  type:
                    type: string
                    example: string
                  text:
                    type: string
      example:
        title: "Quantas canetas?"
        type: "MC"
        mctype: 10
        cotation: 1.6
        statement:
          text: "Quantas canetas verdes estão presentes na figura?"
          imagePath: "http://somewhere.com/canetasVerdes.jpg"
        specialistId: "specialist1"
        courseId: "course1"
        institutionId: "institution1"
        items: [
          {"id": 0, "type": "string", "text": "1"},
          {"id": 1, "type": "string", "text": "2"},
          {"id": 2, "type": "string", "text": "3"},
          {"id": 3, "type": "string", "text": "4"}
        ]
    MultipleChoiceExercise:
      description: "Multiple Choice or True/False exercise schema."
      required:
        - id
      allOf:
        - $ref: '#/components/schemas/MultipleChoiceExerciseWithoutId'
      example:
        id: "exercise1"
        title: "Quantas canetas?"
        type: "MC"
        mctype: 10
        cotation: 1.6
        statement:
          text: "Quantas canetas verdes estão presentes na figura?"
          imagePath: "http://somewhere.com/canetasVerdes.jpg"
        specialistId: "specialist1"
        courseId: "course1"
        institutionId: "institution1"
        items: [
          {"id": 0, "type": "string", "text": "1"},
          {"id": 1, "type": "string", "text": "2"},
          {"id": 2, "type": "string", "text": "3"},
          {"id": 3, "type": "string", "text": "4"}
        ]
    OpenAnswerExerciseWithoutId:
      description: "Schema of an open answer exercise. The exercise id is not required."
      allOf:
        - $ref: '#/components/schemas/ExerciseBasicProperties'
        - type: object
          properties:
            type:
              enum:
                - "OA"
      example:
        title: "Exemplo resposta aberta"
        type: "OA"
        cotation: 100.0
        statement:
          text: "Qual é o sentido da vida?"
          imagePath: "https://cdn.flash.pt/images/2019-10/img_828x523$2019_10_15_13_49_46_227057_im_637409554131662405.png"
        specialistId: "specialist2"
        courseId: "course2"
        institutionId: "institution2"
    OpenAnswerExercise:
      description: "Schema of an open answer exercise."
      required:
        - id
      allOf:
        - $ref: '#/components/schemas/OpenAnswerExerciseWithoutId'
      example:
        id: "exercise2"
        title: "Exemplo resposta aberta"
        type: "OA"
        cotation: 100.0
        statement:
          text: "Qual é o sentido da vida?"
          imagePath: "https://cdn.flash.pt/images/2019-10/img_828x523$2019_10_15_13_49_46_227057_im_637409554131662405.png"
        specialistId: "specialist2"
        courseId: "course2"
        institutionId: "institution2"
    FillTheBlanksExerciseWithoutId:
      description: "Fill the blanks exercise schema. The exercise id is not required."
      allOf: 
        - $ref: '#/components/schemas/ExerciseBasicProperties'
        - type: object
          properties:
            type:
              enum: 
                - "FTB"
            textSegments:
              type: array
              items:
                type: string
            options:
              type: array
              items:
                type: array
                items:
                  type: string
      example:
        title: "Exemplo preencher espaços"
        type: "FTB"
        cotation: 20.0
        statement: null
        specialistId: "specialist3"
        courseId: "course3"
        institutionId: "institution3"
        textSegments: [
            "O país que faz fronteira com Portugal é ",
            "."
          ]
        options: [
            [
              "Espanha",
              "França"
            ]
          ]
    FillTheBlanksExercise:
      allOf:
        - $ref: '#/components/schemas/FillTheBlanksExerciseWithoutId'
      description: "Fill the blanks exercise schema."
      required:
        - id
      example:
        id: "exercise3"
        title: "Exemplo preencher espaços"
        type: "FTB"
        cotation: 20.0
        statement: null
        specialistId: "specialist3"
        courseId: "course3"
        institutionId: "institution3"
        textSegments: [
            "O país que faz fronteira com Portugal é ",
            "."
          ]
        options: [
            [
              "Espanha",
              "França"
            ]
          ]
    ExerciseWithoutId:
      type: object
      description: Exercise (without id) schema
      oneOf:
        - $ref: "#/components/schemas/MultipleChoiceExerciseWithoutId"
        - $ref: "#/components/schemas/OpenAnswerExerciseWithoutId"
        - $ref: "#/components/schemas/FillTheBlanksExerciseWithoutId"
    Exercise:
      type: object
      description: Exercise (with id) schema
      oneOf:
        - $ref: "#/components/schemas/MultipleChoiceExercise"
        - $ref: "#/components/schemas/OpenAnswerExercise"
        - $ref: "#/components/schemas/FillTheBlanksExercise"

    # Exercise Solution/Resolution schemas
    MultipleChoiceData:
      description: "Multiple choice resolution data."
      required:
        - items
      allOf:
        - $ref: '#/components/schemas/ExerciseSolution'
        - type: object
          properties:
            type:
              enum:
                - MC
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  value:
                    type: boolean
      example:
        type: "MC"
        items: [
            { "id": 0, "value" : true },
            { "id": 1, "value" : false },
            { "id": 2, "value" : true },
            { "id": 3, "value" : true }
        ]
    OpenAnswerData:
      description: "Open answer resolution data."
      required:
        - text
      allOf:
        - $ref: '#/components/schemas/ExerciseSolution'
        - type: object
          properties:
            type:
              enum:
                - "OA"
            text:
              type: string
      example: 
        type: "OA"
        text: "É o Toy"
    FillTheBlanksData:
      description: "Fill the blanks resolution data."
      required:
        - fillings
      allOf:
        - $ref: '#/components/schemas/ExerciseSolution'
        - type: object
          properties:
            type:
              enum:
                - "FTB"
            text:
              type: string
      example:
        type: "FTB"
        fillings: ["Espanha"]
    ExerciseResolutionData:
      type: object
      description: "Exercise resolution data schema."
      oneOf:
        - $ref: "#/components/schemas/MultipleChoiceData" 
        - $ref: "#/components/schemas/OpenAnswerData"
        - $ref: "#/components/schemas/FillTheBlanksData" 
    ExerciseSolution:
      type: object
      description: "Exercise solution schema."
      required:
        - type
      properties:
        id:
          type: string
        data:
          $ref: "#/components/schemas/ExerciseResolutionData"
    ExerciseResolution:
      allOf:
        - $ref: "#/components/schemas/ExerciseSolution"
        - type: object
          properties:
            studentId:
              type: string
            exerciseId:
              type: string
            cotation:
              type: number
              format: float
            submissionNr: 
              type: integer
            status:
              type: string
              enum:
                - "not_revised"
                - "revised"
            comment:
              $ref: "#/components/schemas/Comment"
            data:
              $ref: "#/components/schemas/ExerciseResolutionData"

    # Exercise Rubric schemas

    RubricBasicProperties:
      type: object
      description: "Basic properties of a rubric"
      required:
        - type
      properties:
        type:
          type: string
    MultipleChoiceRubric:
      required:
        - choiceCotation
        - penalty
      allOf:
        - $ref: '#/components/schemas/RubricBasicProperties'
        - type: object
          properties:
            type:
              enum:
                - "MC"
            choiceCotation:
              type: number
              format: float
            penalty:
              type: number
              format: float
      example: {
        "type" : "MC",
        "choiceCotation": 0.4,
        "penalty": 0
      }
    OpenAnswerRubric:
      required:
        - criteria
      allOf:
        - $ref: '#/components/schemas/RubricBasicProperties'
        - type: object
          properties:
            type:
              enum:
                - "OA"
            criteria:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                  standards:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        description:
                          type: string
                        cotation:
                          type: number
                          format: float
      example: {
        "type": "OA",
        "criteria":[
            {
                "title":"",
                "standards":[
                {
                    "title":"",
                    "description":"",
                    "cotation":30.0
                },
                {
                    "title":"",
                    "description":"",
                    "cotation":50.0
                }
                ]
            },
            {
                "title":"",
                "standards":[
                {
                    "title":"",
                    "description":"",
                    "cotation":20.0
                }
                ]
            }
        ]
      }
    FillTheBlanksRubric:
      required:
        - choiceCotation
        - penalty
      allOf:
        - $ref: '#/components/schemas/RubricBasicProperties'
        - type: object
          properties:
            type:
              enum:
                - "FTB"
            fillingCotation:
              type: number
              format: float
            penalty:
              type: number
              format: float
      example: {
        "type" : "FTB",
        "fillingCotation": 20.0,
        "penalty": 0
      }
    Rubric:
      type: object
      description: Rubric schema.
      oneOf:
        - $ref: "#/components/schemas/MultipleChoiceRubric"
        - $ref: "#/components/schemas/OpenAnswerRubric"
        - $ref: "#/components/schemas/FillTheBlanksRubric"
    
    # User Schemas

    UserBasicProperties:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        photoPath:
          type: string
        description:
          type: string
    Student:
      allOf:
        - $ref: '#/components/schemas/UserBasicProperties'
    StudentSimplified:
      type: object
      description: Simplified version of the student schema.
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
    Specialist:
      allOf:
        - $ref: '#/components/schemas/UserBasicProperties'
    InstitutionManager:
      allOf:
        - $ref: '#/components/schemas/UserBasicProperties'
        - type: object
          properties:
            institutionId:
              type: string

#todo - ver como adicionar parte dos cookies, nomeadamente da seguranca
#todo - verificar parte dos campos required. Tirar o required dos schemas e definir no schema de cada método.

paths:
  # Exercises related paths
  #todo - generate exercise using AI. Oque é que recebe? Usa outros exercícios para tentar criar? Recebe texto? 
  /exercises:
    get: 
      tags: [exercises]
      summary: Retrieve exercises.
      description: Retrieves exercises that match the given filters.
      parameters:
        - name: page
          schema:
            type: integer
          in: query
          required: true
        - name: itemsPerPage
          schema:
            type: integer
            minimum: 1
            maximum: 50
          in: query
          required: true
        - name: tags
          description: Array of identifiers from the tags that will be used to filter the exercises.
          in: query
          schema:
            type: array
            items:
              type: integer
            default: []
          required: false
        - name: matchAllTags
          description: Value that defines if the exercise must have all the given tags to be retrieved. 
          in: query
          schema:
            type: boolean
            default: false
          required: false
        #- name: levels
        #  description: | 
        #    Number of levels that determine the depth of the search. -1 for "all levels". 
        #    0 if only the exercises containing the given tags should be returned.
        #  in: query
        #  schema:
        #    type: integer
        #    default: 0
        #  required: false
        - name: visibilityType
          description: | 
            Describes the type of visibility that the exercises must have. 
            This parameter must be paired with the parameter 'visibilityTarget' 
            when the value is either 'institution' or 'course'.
          in: query
          schema:
            type: string
            default: public
            enum:
              - public
              - institution
              - course
        - name: visibilityTarget
          description: |
            Identifier of the visibility target. For example, if visibilityType='institution', 
            then this parameter is the identifier of the institution.
          in: query
          schema:
            type: string
          required: false
        - name: specialistId
          in: query
          schema:
            type: string
          required: false
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exercise"
        "401":
          description: "Unauthorized operation. Example: When trying to access exercises from a specific course that the user does not belong to."
    post:
      tags: [exercises]
      summary: Create an exercise
      description: This method is used to create an exercise regardless of its type. Check the request body schema to understand how to create the different exercises.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "If a rubric and a solution are provided, their type must match the type of the exercise."
              required:
                - visibility
                - exercise
                - tagsIds
              properties:
                exercise:
                  $ref: '#/components/schemas/ExerciseWithoutId'
                solution:
                  $ref: '#/components/schemas/ExerciseSolution'
                rubric:
                  $ref: '#/components/schemas/Rubric'
                visibility:
                  $ref: '#/components/schemas/Visibility'
                tagsIds:
                  type: array
                  items:
                    type: string
                    example: "12345"
      responses:
        "200":
          description: Exercise created successfully.
          content:
            application/json:
              schema:
                type: string
                description: "identifier of the new exercise"
        "400":
          description: Bad input.
        "401":
          description: Unauthorized operation.
  /exercises/{exerciseId}:
    delete:
      tags: [exercises]
      summary: Delete exercise by its id.
      parameters:
        - name: exerciseId
          in: path
          description: Exercise identifier
          required: true
          schema:
            type: string
            example: "exercise1"
      responses:
        "200":
          description: "Exercise deleted successfully."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise not found." 
    put:
      tags: [exercises]
      summary: Update an exercise
      description: This method is used to update an existing exercise. Check the schema
      parameters:
        - name: exerciseId
          in: path
          description: Exercise identifier
          required: true
          schema:
            type: string
            example: "exercise1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "If a rubric and a solution are provided, their type must match the type of the exercise. The given properties will be updated. The hidden properties will not be modified. If a property is null, then it is considered that it should be deleted."
              properties:
                exercise:
                  $ref: '#/components/schemas/ExerciseWithoutId'
                solution:
                  $ref: '#/components/schemas/ExerciseSolution'
                rubric:
                  $ref: '#/components/schemas/Rubric'
                visibility:
                  $ref: '#/components/schemas/Visibility'
                tagsIds:
                  type: array
                  items:
                    type: string
                    example: "12345"
      responses:
        "200":
          description: "Exercise updated successfully."
        "400":
          description: "Bad input."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise not found."
  /exercises/{exerciseId}/duplicate:
    post:
      tags: [exercises]
      summary: Duplicates the exercise using its identifier.
      parameters:
        - name: exerciseId
          in: path
          description: Exercise identifier
          required: true
          schema:
            type: string
            example: "exercise1"
      responses:
        "200":
          description: "Successful duplication."
          content:
            application/json:
              schema:
                type: string
                description: identifier of the new exercise
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise with the given id does not exist."
  /exercises/{exerciseId}/resolutions:
    get: 
      tags: [exercises]
      summary: Get all exercise resolutions.
      parameters:
        - name: exerciseId
          in: path
          description: Exercise identifier
          required: true
          schema:
            type: string
            example: "exercise1"
        - name: page
          schema:
            type: integer
          in: query
          required: true
        - name: itemsPerPage
          schema:
            type: integer
            minimum: 1
            maximum: 50
          in: query
          required: true
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    student:
                      $ref: '#/components/schemas/StudentSimplified'
                    resolution:
                      $ref: '#/components/schemas/ExerciseResolution'
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise not found."
    post: 
      tags: [exercises]
      summary: Create an exercise resolution
      parameters:
        - name: exerciseId
          schema:
            type: integer
          in: query
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseResolution'
        required: true
      responses:
        "200":
          description: "Exercise resolution created successfully."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Could not find any exercise with the given id."
  /exercises/{exerciseId}/resolutions/correction:
    put:
      tags: [exercises]
      summary: "Issue the automatic correction of the exercise resolutions."
      parameters:
        - name: exerciseId
          in: path
          description: Exercise identifier
          required: true
          schema:
            type: string
            example: "exercise1"
        - name: correctionType
          in: query
          description: | 
            Type of correction. The correction can either be automatic or done by AI.
            For a given exercise, it may support either, both, or none of the correction types.
          schema:
            type: string
            enum:
              - "auto"
              - "ai"
      responses:
        "200":
          description: "Success."
        "400":
          description: "The requested type of correction is not supported for the given exercise."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise not found."     
  /exercises/resolutions/{resolutionId}:
    get: 
      tags: [exercises]
      summary: Get exercise resolution using its id.
      parameters:
        - name: resolutionId
          in: path
          description: Exercise resolution identifier
          required: true
          schema:
            type: string
            example: "resolution1"
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseResolution'
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise resolution not found."
  /exercises/resolutions/{resolutionId}/comment:
    post:
      tags: [exercises]
      summary: Add comment to a resolution
      parameters:
        - name: resolutionId
          in: path
          description: Exercise resolution identifier
          required: true
          schema:
            type: string
            example: "resolution1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      responses:
        "200":
          description: "Success."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise resolution not found."
  /exercises/resolutions/{resolutionId}/manual-correction:
    post:
      tags: [exercises]
      summary: "To set the cotation of an exercise resolution manually."
      parameters:
        - name: resolutionId
          in: path
          schema:
            type: string
          required: true
        - name: cotation
          in: query
          required: true
          schema:
            type: number
            format: float
      responses:
        "200":
          description: "Success."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Resolution not found."
  /exercises/{exerciseId}/resolutions/count:
    get:
      tags:
        - exercises
      summary: Retrieves the number of students that submitted a resolution for a specific exercise.
      description: |
        Retrieves the number of students that submitted a resolution for a specific exercise. 
        The total number of  submissions can be obtained by setting the 'total' query parameter to 'true'.
      parameters:
        - name: exerciseId
          in: path
          description: Exercise identifier
          required: true
          schema:
            type: string
            example: "exercise1"
        - name: total
          description: "'false' to count the number of students that made a submission. 'true' to count the total number of submissions."
          schema:
            type: boolean
            default: false
          in: query
          required: false
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: integer
        "404":
          description: "Exercise not found."
  /exercises/{exerciseId}/resolutions/{studentId}/count:
    get:
      tags:
        - exercises
      summary: Retrieves the number of (resolution) submissions a student has made for a specific exercise.
      parameters:
        - name: exerciseId
          in: path
          description: Exercise identifier
          required: true
          schema:
            type: string
            example: "exercise1"
        - name: studentId
          in: path
          description: student identifier
          required: true
          schema:
            type: string
            example: "student1"
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: integer
        "404":
          description: "Exercise not found."
  /exercises/{exerciseId}/resolutions/{studentId}/ids:
    get:
      tags: [exercises]
      summary: Get the list of identifiers of the student's resolutions for the given exercise.
      responses:
        "200":
          description: "Success."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: "id of a resolution"
        "401":
          description: "Unauthorized operation."
  /exercises/{exerciseId}/resolutions/{studentId}/last:
    get:
      tags: [exercises]
      summary: Get latest exercise resolution made by the student.
      parameters:
        - name: exerciseId
          in: path
          schema:
            type: string
          required: true
        - name: studentId
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "Success."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExerciseResolution"
                nullable: false
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Not found."
  /exercises/{exerciseId}/rubric:
    get:
      tags: [exercises]
      summary: "Retrieve exercise rubric."
      description: "Retrieve exercise rubric. 'null' is returned if a rubric does not exist."
      parameters:
        - name: exerciseId
          in: path
          description: Exercise identifier
          required: true
          schema:
            type: string
            example: "exercise1"
      responses:
        "200":
          description: "Retrieval successful."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rubric'
                nullable: true
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise does not exist."
    post:
      tags: [exercises]
      summary: "Create a rubric for an exercise."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/MultipleChoiceRubric"
                - $ref: "#/components/schemas/OpenAnswerRubric"
                - $ref: "#/components/schemas/FillTheBlanksRubric"
      responses:
        "200":
          description: "Rubric created successfully."
        "401":
          description: "Unauthorized operation." 
        "404":
          description: "Exercise does not exist." 
  /exercises/rubrics/{rubricId}:
    put:
      tags: [exercises]
      summary: "Update the rubric."
      parameters:
        - name: rubricId
          in: path
          description: rubric identifier
          required: true
          schema:
            type: string
            example: "rubric1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rubric'
      responses:
        "200":
          description: "Rubric created successfully."
        "400":
          description: "Malformed request. Rubric may not be the correct type."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise does not exist."
    delete:
      tags: [exercises]
      summary: "Delete the exercise rubric."
      parameters:
        - name: rubricId
          in: path
          description: rubric identifier
          required: true
          schema:
            type: string
            example: "rubric1"
      responses:
        "200":
          description: "Deletion successful."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Exercise does not exist."
  /exercises/tag:
    get:
      tags: [exercises]
      summary: Retrieve tags.
      description: | 
        Retrieves the tags used to characterize the exercises. 
        A path or paths can be given to define where the retrieval of tags should start. 
        A number of levels can also be provided to inform how much depth the retrieval should cover.
      parameters:
        - name: paths
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            default: ["/"]
          description: Array of paths from which the tags should be retrieved.
        - name: levels
          in: query
          required: false
          schema:
            type: integer
            default: -1
          description: Number of levels, starting from the given paths that should be retrieved. -1 to retrieve every tag starting at the given paths.
      responses:
        "200":
          description: "Tags retrieved successfully."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        

  #todo - courses -> methods to add specialist, students, etc. Invitation links?
  #todo - manual/automatic/ai test correction

  