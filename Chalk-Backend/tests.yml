openapi: "3.0.3"
info:
  title: Chalk - Test Your Knowledge
  version: "1.0.0"  

tags:
  - name: tests
    description: Everything related to tests.

components:
  schemas:
        # Test / Test Resolution Schemas
    TestBasicProperties:
      description: "Schema of a test"
      type: object
      required: 
        - specialistId  
        - institutionId  
        - title  
        - globalInstructions  
        - globalCotation
        - conclusion  
        - creationDate  
        - publishDate  
        - startDate  
        - endDate  
        - startTolerance  
        - numberOfResubmissions
        - groups
      properties:
        id:
          type: string
        type:
          type: string
        specialistId:
          type: string
        institutionId:
          type: string
        courseId:
          type: string
        title:
          type: string
        globalInstructions:
          type: string
        globalCotation:
          type: number
          format: float
        conclusion:
          type: string
        creationDate:
          type: string
          format: date-time
        publishDate:
          type: string
          format: date-time
        groups:
          type: array
          items:
            $ref: "#/components/schemas/TestGroup"
    BasicTest:
      description: "Schema of a basic test."
      allOf:
        - type: object
          properties:
            type:
              enum:
                - "basic"
        - $ref: "#/components/schemas/TestBasicProperties"
    DeliverDateTest:
      description: "Schema of a deliver date test"
      allOf:
        - type: object
          properties:
            deliverDate:
              type: string
              format: date-time
            type:
              enum:
                - "deliver_date"
        - $ref: "#/components/schemas/TestBasicProperties"
    LiveTest:
      description: "Schema of a live test"
      allOf:
        - type: object
          properties:
            type:
              enum:
                - "live"
            startDate:
              type: string
              format: date-time
            startTolerance:
              type: string
              format: time
              example: "23:22:30.524"
              description: "HH:mm:ss.SSS"
            duration:
              type: string
              format: time
              example: "23:22:30.524"
              description: "HH:mm:ss.SSS"
        - $ref: "#/components/schemas/TestBasicProperties"
    Test:
      description: "Schema of a test"
      oneOf:
        - $ref: "#/components/schemas/BasicTest"
        - $ref: "#/components/schemas/DeliverDateTest"
        - $ref: "#/components/schemas/LiveTest"
    TestGroup:
      description: "Test group's schema."
      type: object
      required:
        - groupCotation
        - exercises
      properties:
        groupInstructions:
          type: string
        groupCotation:
          type: number
          format: float
        exercises:
          type: array
          items:
            oneOf:
              - $ref: "exercises.yml#/components/schemas/Exercise"
              - type: object
                description: "Used only for POST methods, when there is a need to copy existing exercises."
                properties:
                  originalExerciseId:
                    type: string
                    description: "Identifier of the exercise that is supposed to be copied."
                    example: "exercise123"
                  cotation:
                    type: number
                    format: float
                    description: "Cotation associated to the copied exercise."              
    TestResolution:
      description: "Test resolution's schema."
      type: object
      required:
        - id
      properties:
        id:
          type: string
        studentId: 
          type: string
        testId:
          type: string
        startDate:
          type: string
          format: date-time
        submissionDate:
          type: string
          format: date-time
        submissionNr:
          type: integer
        status:
          type: string
          enum:
            - "ongoing"
            - "not_revised"
            - "revised"
            - "revision_ongoing"
            - "invalidated"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/TestResolutionGroup"
    TestResolutionGroup:
      description: "Test resolution group's schema."
      type: object
      required:
        - groupCotation
      properties:
        resolutions:
          type: array
          items:
            $ref: "./exercises.yml#/components/schemas/ExerciseResolution"
        groupCotation:
          type: number
          format: float

paths:
    # Tests related paths
  /tests:
    get: 
      tags: [tests]
      summary: Retrieve tests.
      description: Retrieves tests that match the given filters.
      parameters:
        - name: page
          schema:
            type: integer
          in: query
          required: true
        - name: itemsPerPage
          schema:
            type: integer
            minimum: 1
            maximum: 50
          in: query
          required: true
        - name: tags
          description: Array of identifiers from the tags that will be used to filter the tests.
          in: query
          schema:
            type: array
            items:
              type: integer
            default: []
          required: false
        - name: matchAllTags
          description: Value that defines if the exercise must have all the given tags to be retrieved. 
          in: query
          schema:
            type: boolean
            default: false
          required: false
        - name: visibilityType
          description: | 
            Describes the type of visibility that the tests must have. 
            This parameter must be paired with the parameter 'visibilityTarget' 
            when the value is either 'institution' or 'course'.
          in: query
          schema:
            type: string
            default: public
            enum:
              - public
              - institution
              - course
        - name: visibilityTarget
          description: |
            Identifier of the visibility target. For example, if visibilityType='institution', 
            then this parameter is the identifier of the institution.
          in: query
          schema:
            type: string
          required: false
        - name: specialistId
          in: query
          schema:
            type: string
          required: false
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        "401":
          description: "Unauthorized operation. Example: When trying to access tests from a specific course that the user does not belong to."  
    post:
      tags: ["tests"]
      summary: Create a test
      parameters:
        - name: visibility
          in: query
          required: true
          schema:
            $ref: 'exercises.yml#/components/schemas/Visibility' 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        "200":
          description: "Success."
          content:
            application/json:
              schema:
                type: string
                description: "identifier of the new test"
        "400":
          description: "Bad input."
        "401": 
          description: "Unauthorized operation."
  /tests/{testId}:
    delete:
      tags: [tests]
      summary: Delete test by its id.
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
            example: "test1"
      responses:
        "200":
          description: "Test deleted successfully."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Test not found." 
    put:
      tags: [tests]
      summary: Update a test
      description: This method is used to update an existing test. Check the schema
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
            example: "test1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        "204":
          description: "Test updated successfully."
        "400":
          description: "Bad input."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Test not found."
  /tests/{testId}/duplicate:
    post:
      tags: [tests]
      summary: Duplicates the test using its identifier.
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
            example: "test1"
      responses:
        "200":
          description: "Successful duplication."
          content:
            application/json:
              schema:
                type: string
                description: "identifier of the duplicated test"
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Test with the given id does not exist."
  /tests/{testId}/resolutions:
    get: 
      tags: [tests]
      summary: Get all test resolutions.
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
            example: "test1"
        - name: page
          schema:
            type: integer
          in: query
          required: true
        - name: itemsPerPage
          schema:
            type: integer
            minimum: 1
            maximum: 50
          in: query
          required: true
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    student:
                      $ref: 'exercises.yml#/components/schemas/StudentSimplified'
                    resolution:
                      $ref: '#/components/schemas/TestResolution'
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Test not found."
    post: 
      tags: [tests]
      summary: Create a test resolution
      parameters:
        - name: testId
          schema:
            type: integer
          in: query
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestResolution'
        required: true
      responses:
        "200":
          description: "Test resolution created successfully."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Could not find any test with the given id."
  /tests/{testId}/resolutions/correction:
    put:
      tags: [tests]
      summary: "Issue the automatic correction of the test resolutions."
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
            example: "test1"
        - name: correctionType
          in: query
          description: | 
            Type of correction. The correction can either be automatic or done by AI.
            When using AI correction, the AI will only be used to correct questions that
            cannot be corrected automatically, i.e., by using the solution.
          schema:
            type: string
            enum:
              - "auto"
              - "ai"
      responses:
        "200":
          description: "Success."
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Test not found."     
  /tests/resolutions/{resolutionId}:
    get: 
      tags: [tests]
      summary: Get test resolution using its id.
      parameters:
        - name: resolutionId
          in: path
          description: Test resolution identifier
          required: true
          schema:
            type: string
            example: "resolution1"
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResolution'
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Test resolution not found."
  #/tests/resolutions/{resolutionId}/manual-correction:
  #  post:
  #    tags: [tests]
  #    summary: "To set the cotation of an test resolution manually."
  #    parameters:
  #      - name: resolutionId
  #        in: path
  #        schema:
  #          type: string
  #        required: true
  #      - name: cotation
  #        in: query
  #        required: true
  #        schema:
  #          type: number
  #          format: float
  #    responses:
  #      "200":
  #        description: "Success."
  #      "401":
  #        description: "Unauthorized operation."
  #      "404":
  #        description: "Resolution not found."
  /tests/{testId}/resolutions/count:
    get:
      tags:
        - tests
      summary: Retrieves the number of students that submitted a resolution for a specific test.
      description: | 
        - Retrieves the number of students that submitted a resolution for a specific test. 
        The total number of submissions can be obtained by setting the 'total' query parameter to 'true'.
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
            example: "test1"
        - name: total
          description: "'false' to count the number of students that made a submission. 'true' to count the total number of submissions."
          schema:
            type: boolean
            default: false
          in: query
          required: false
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: integer
        "404":
          description: "Test not found."
  /tests/{testId}/resolutions/{studentId}/can-submit:
    get:
      tags:
        - tests
      summary: Allows to check if the student can submit a resolution for the test.
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
            example: "test1"
        - name: studentId
          in: path
          description: student identifier
          required: true
          schema:
            type: string
            example: "student1"
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: boolean
        "404":
          description: "Test not found."
  /tests/{testId}/resolutions/{studentId}/count:
    get:
      tags:
        - tests
      summary: Retrieves the number of (resolution) submissions a student has made for a specific test.
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
            example: "test1"
        - name: studentId
          in: path
          description: student identifier
          required: true
          schema:
            type: string
            example: "student1"
      responses:
        "200":
          description: "Successful retrieval."
          content:
            application/json:
              schema:
                type: integer
        "404":
          description: "Test not found."
  /tests/{testId}/resolutions/{studentId}/ids:
    get:
      tags: [tests]
      summary: Get the list of identifiers of the student's resolutions for the given test.
      responses:
        "200":
          description: "Success."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: "id of a resolution"
        "401":
          description: "Unauthorized operation."
  /tests/{testId}/resolutions/{studentId}/last:
    get:
      tags: [tests]
      summary: Get latest test resolution made by the student.
      parameters:
        - name: testId
          in: path
          schema:
            type: string
          required: true
        - name: studentId
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "Success."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestResolution"
                nullable: false
        "401":
          description: "Unauthorized operation."
        "404":
          description: "Not found."

# todo - create blank test resolution
# todo - allow to send one exercise resolution (from a test) at a time
