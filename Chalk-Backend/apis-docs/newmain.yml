components:
  schemas:
    BasicTest:
      allOf:
        - properties:
            type:
              enum:
                - basic
          type: object
        - $ref: "#/components/schemas/TestBasicProperties"
      description: Schema of a basic test.
    Comment:
      properties:
        items:
          items:
            oneOf:
              - type: string
          type: array
      type: object
    Course:
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/CourseWithoutId"
        - properties:
            id:
              $ref: "#/components/schemas/StringID"
          type: object
      description: Schema of a course.
      required:
        - id
      type: object
    CourseWithoutId:
      additionalProperties: false
      description: Course's Schema. Course Id is not required
      properties:
        creatorId:
          $ref: "#/components/schemas/StringID"
        description:
          example: something
          type: String
        institutionId:
          example: uminho
          type: String
        name:
          example: EngenhariaInformatica
          type: String
      required:
        - name
        - institutionId
        - description
        - creatorId
      type: object
    CreditCard:
      additionalProperties: false
      description: Credit card's schema.
      example:
        cvv: "666"
        expirationDate: 11-09-2050
        name: GONCALO COUTO DOS SANTOS
        number: "5555555555554444"
      properties:
        cvv:
          type: string
        expirationDate:
          format: Date
          type: string
        name:
          type: string
        number:
          type: string
      required:
        - name
        - number
        - cvv
        - expirationDate
      type: object
    DeliverDateTest:
      allOf:
        - properties:
            deliverDate:
              format: date-time
              type: string
            type:
              enum:
                - deliver_date
          type: object
        - $ref: "#/components/schemas/TestBasicProperties"
      description: Schema of a deliver date test
    Exercise:
      description: Exercise (with id) schema
      oneOf:
        - $ref: "#/components/schemas/MultipleChoiceExercise"
        - $ref: "#/components/schemas/OpenAnswerExercise"
        - $ref: "#/components/schemas/FillTheBlanksExercise"
      type: object
    ExerciseBasicProperties:
      allOf:
        - $ref: "#/components/schemas/ExerciseMetadata"
        - properties:
            statement:
              properties:
                imagePath:
                  example: http://somewhere.com/canetasVerdes.jpg
                  type: string
                text:
                  type: string
              required:
                - text
                - imagePath
              type: object
            title:
              type: string
          type: object
      description: Basic properties of an exercise.
      required:
        - title
        - statement
    ExerciseMetadata:
      description: Metadata of an exercise.
      properties:
        cotation:
          format: float
          type: number
        courseId:
          $ref: "#/components/schemas/StringID"
        id:
          $ref: "#/components/schemas/StringID"
        institutionId:
          $ref: "#/components/schemas/StringID"
        specialistId:
          $ref: "#/components/schemas/StringID"
        type:
          type: string
      required:
        - type
        - institutionId
        - courseId
        - specialistId
      type: object
    ExerciseReference:
      allOf:
        - $ref: "#/components/schemas/ExerciseMetadata"
        - properties:
            originalExerciseId:
              $ref: "#/components/schemas/StringID"
          type: object
      description:
        "Used when duplicating an existing exercise. \nThis schema allows\
        \ to include the new metadata, \nand refer the identifier of the exercise\
        \ that \ncontains the exercise data to be copied.\nThe 'originalExerciseId'\
        \ is the identifier of \nthe exercise that is supposed to be copied."
    ExerciseResolution:
      allOf:
        - $ref: "#/components/schemas/ExerciseSolution"
        - properties:
            comment:
              $ref: "#/components/schemas/Comment"
            cotation:
              format: float
              type: number
            data:
              $ref: "#/components/schemas/ExerciseResolutionData"
            exerciseId:
              $ref: "#/components/schemas/StringID"
            status:
              enum:
                - not_revised
                - revised
              type: string
            studentId:
              $ref: "#/components/schemas/StringID"
            submissionNr:
              type: integer
          type: object
    ExerciseResolutionData:
      description: Exercise resolution data schema.
      oneOf:
        - $ref: "#/components/schemas/MultipleChoiceData"
        - $ref: "#/components/schemas/OpenAnswerData"
        - $ref: "#/components/schemas/FillTheBlanksData"
      type: object
    ExerciseSolution:
      description: Exercise solution schema.
      properties:
        data:
          $ref: "#/components/schemas/ExerciseResolutionData"
        id:
          $ref: "#/components/schemas/StringID"
      required:
        - type
      type: object
    ExerciseWithoutId:
      description: Exercise (without id) schema
      oneOf:
        - $ref: "#/components/schemas/MultipleChoiceExerciseWithoutId"
        - $ref: "#/components/schemas/OpenAnswerExerciseWithoutId"
        - $ref: "#/components/schemas/FillTheBlanksExerciseWithoutId"
      type: object
    FillTheBlanksData:
      allOf:
        - $ref: "#/components/schemas/ExerciseSolution"
        - properties:
            text:
              type: string
            type:
              enum:
                - FTB
          type: object
      description: Fill the blanks resolution data.
      example:
        fillings:
          - Espanha
        type: FTB
      required:
        - fillings
    FillTheBlanksExercise:
      allOf:
        - $ref: "#/components/schemas/FillTheBlanksExerciseWithoutId"
      description: Fill the blanks exercise schema.
      example:
        cotation: 20.0
        courseId: course3
        id: exercise3
        institutionId: institution3
        options:
          - - Espanha
            - "Fran\xE7a"
        specialistId: specialist3
        statement: null
        textSegments:
          - "O pa\xEDs que faz fronteira com Portugal \xE9 "
          - .
        title: "Exemplo preencher espa\xE7os"
        type: FTB
      required:
        - id
    FillTheBlanksExerciseWithoutId:
      allOf:
        - $ref: "#/components/schemas/ExerciseBasicProperties"
        - properties:
            options:
              items:
                items:
                  type: string
                type: array
              type: array
            textSegments:
              items:
                type: string
              type: array
            type:
              enum:
                - FTB
          type: object
      description: Fill the blanks exercise schema. The exercise id is not required.
      example:
        cotation: 20.0
        courseId: course3
        institutionId: institution3
        options:
          - - Espanha
            - "Fran\xE7a"
        specialistId: specialist3
        statement: null
        textSegments:
          - "O pa\xEDs que faz fronteira com Portugal \xE9 "
          - .
        title: "Exemplo preencher espa\xE7os"
        type: FTB
    FillTheBlanksRubric:
      allOf:
        - $ref: "#/components/schemas/RubricBasicProperties"
        - properties:
            fillingCotation:
              format: float
              type: number
            penalty:
              format: float
              type: number
            type:
              enum:
                - FTB
          type: object
      example:
        fillingCotation: 20.0
        penalty: 0
        type: FTB
      required:
        - choiceCotation
        - penalty
    Institution:
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/InstitutionWithoutId"
        - properties:
            id:
              $ref: "#/components/schemas/StringID"
          type: object
      description: Basic properties of a institution.
      example:
        id: uminho
      required:
        - id
    InstitutionManager:
      allOf:
        - $ref: "#/components/schemas/UserBasicProperties"
        - properties:
            institutionId:
              type: string
          type: object
      description: Institution Manager's Schema
      example:
        id: id_Ray
        institutionId: institution1
        name: Rui Braga
        photoPath: https://media.vogue.fr/photos/5c3618b2093f3f72befae9d6/2:3/w_2560%2Cc_limit/mood_gosling_8365.jpeg?lang=eng
      required:
        - institutionId
    InstitutionManagerWithoutId:
      description: Institution Manager's Schema. The user id is not required.
      example:
        institutionId: institution1
        name: Rui Braga
        photoPath: https://media.vogue.fr/photos/5c3618b2093f3f72befae9d6/2:3/w_2560%2Cc_limit/mood_gosling_8365.jpeg?lang=eng
      properties:
        UserWithoutId:
          $ref: "#/components/schemas/UserWithoutId"
        institutionId:
          $ref: "#/components/schemas/StringInput"
      required:
        - institutionId
        - UserWithoutId
    InstitutionSubscription:
      additionalProperties: false
      description: Institution subscription's schema.
      properties:
        specialistsSub:
          $ref: "#/components/schemas/Subscription"
        studentsSub:
          $ref: "#/components/schemas/Subscription"
      type: object
    InstitutionWithoutId:
      additionalProperties: false
      description: Basic properties of a institution.
      example:
        description: LEI>LCC
        institutionId: ""
        name: Universidade do minho
      properties:
        logopath:
          $ref: "#/components/schemas/StringInput"
        name:
          $ref: "#/components/schemas/StringInput"
        photoPath:
          $ref: "#/components/schemas/StringInput"
      required:
        - name
        - photoPath
        - logopath
      type: object
    LiveTest:
      allOf:
        - properties:
            duration:
              description: HH:mm:ss.SSS
              example: "23:22:30.524"
              format: time
              type: string
            startDate:
              format: date-time
              type: string
            startTolerance:
              description: HH:mm:ss.SSS
              example: "23:22:30.524"
              format: time
              type: string
            type:
              enum:
                - live
          type: object
        - $ref: "#/components/schemas/TestBasicProperties"
      description: Schema of a live test
    MultipleChoiceData:
      allOf:
        - $ref: "#/components/schemas/ExerciseSolution"
        - properties:
            items:
              items:
                properties:
                  id:
                    type: integer
                  value:
                    type: boolean
                type: object
              type: array
            type:
              enum:
                - MC
          type: object
      description: Multiple choice resolution data.
      example:
        items:
          - id: 0
            value: true
          - id: 1
            value: false
          - id: 2
            value: true
          - id: 3
            value: true
        type: MC
      required:
        - items
    MultipleChoiceExercise:
      allOf:
        - $ref: "#/components/schemas/MultipleChoiceExerciseWithoutId"
      description: Multiple Choice or True/False exercise schema.
      example:
        cotation: 1.6
        courseId: course1
        id: exercise1
        institutionId: institution1
        items:
          - id: 0
            text: "1"
            type: string
          - id: 1
            text: "2"
            type: string
          - id: 2
            text: "3"
            type: string
          - id: 3
            text: "4"
            type: string
        mctype: 10
        specialistId: specialist1
        statement:
          imagePath: http://somewhere.com/canetasVerdes.jpg
          text: "Quantas canetas verdes est\xE3o presentes na figura?"
        title: Quantas canetas?
        type: MC
      required:
        - id
    MultipleChoiceExerciseWithoutId:
      allOf:
        - $ref: "#/components/schemas/ExerciseBasicProperties"
        - properties:
            items:
              items:
                properties:
                  id:
                    type: integer
                  text:
                    type: string
                  type:
                    example: string
                    type: string
                type: object
              type: array
            mctype:
              description:
                "Defines the type of multiple choice exercise.\nShould follow\
                \ the format \"XX\".\nOptions:\n  1X -> multiple choice /\n  2X -> true\
                \ or false / \n  X0 means 'no justification' / \n  X1 means 'justify\
                \ all items' / \n  X2 means 'justify false/unmarked items' / \n  X3\
                \ means 'justify true/marked items'\"\n"
              type: integer
            type:
              enum:
                - MC
          type: object
      description:
        Multiple Choice or True/False exercise schema. The exercise id
        is not required.
      example:
        cotation: 1.6
        courseId: course1
        institutionId: institution1
        items:
          - id: 0
            text: "1"
            type: string
          - id: 1
            text: "2"
            type: string
          - id: 2
            text: "3"
            type: string
          - id: 3
            text: "4"
            type: string
        mctype: 10
        specialistId: specialist1
        statement:
          imagePath: http://somewhere.com/canetasVerdes.jpg
          text: "Quantas canetas verdes est\xE3o presentes na figura?"
        title: Quantas canetas?
        type: MC
      required:
        - mctype
        - items
    MultipleChoiceRubric:
      allOf:
        - $ref: "#/components/schemas/RubricBasicProperties"
        - properties:
            choiceCotation:
              format: float
              type: number
            penalty:
              format: float
              type: number
            type:
              enum:
                - MC
          type: object
      example:
        choiceCotation: 0.4
        penalty: 0
        type: MC
      required:
        - choiceCotation
        - penalty
    OpenAnswerData:
      allOf:
        - $ref: "#/components/schemas/ExerciseSolution"
        - properties:
            text:
              type: string
            type:
              enum:
                - OA
          type: object
      description: Open answer resolution data.
      example:
        text: "\xC9 o Toy"
        type: OA
      required:
        - text
    OpenAnswerExercise:
      allOf:
        - $ref: "#/components/schemas/OpenAnswerExerciseWithoutId"
      description: Schema of an open answer exercise.
      example:
        cotation: 100.0
        courseId: course2
        id: exercise2
        institutionId: institution2
        specialistId: specialist2
        statement:
          imagePath: https://cdn.flash.pt/images/2019-10/img_828x523$2019_10_15_13_49_46_227057_im_637409554131662405.png
          text: "Qual \xE9 o sentido da vida?"
        title: Exemplo resposta aberta
        type: OA
      required:
        - id
    OpenAnswerExerciseWithoutId:
      allOf:
        - $ref: "#/components/schemas/ExerciseBasicProperties"
        - properties:
            type:
              enum:
                - OA
          type: object
      description: Schema of an open answer exercise. The exercise id is not required.
      example:
        cotation: 100.0
        courseId: course2
        institutionId: institution2
        specialistId: specialist2
        statement:
          imagePath: https://cdn.flash.pt/images/2019-10/img_828x523$2019_10_15_13_49_46_227057_im_637409554131662405.png
          text: "Qual \xE9 o sentido da vida?"
        title: Exemplo resposta aberta
        type: OA
    OpenAnswerRubric:
      allOf:
        - $ref: "#/components/schemas/RubricBasicProperties"
        - properties:
            criteria:
              items:
                properties:
                  standards:
                    items:
                      properties:
                        cotation:
                          format: float
                          type: number
                        description:
                          type: string
                        title:
                          type: string
                      type: object
                    type: array
                  title:
                    type: string
                type: object
              type: array
            type:
              enum:
                - OA
          type: object
      example:
        criteria:
          - standards:
              - cotation: 30.0
                description: ""
                title: ""
              - cotation: 50.0
                description: ""
                title: ""
            title: ""
          - standards:
              - cotation: 20.0
                description: ""
                title: ""
            title: ""
        type: OA
      required:
        - criteria
    Payment:
      additionalProperties: false
      description: Payment's schema.
      example:
        creditCard:
          cvv: "666"
          expirationDate: 11-09-2050
          name: "GON\xC7ALO COUTO DOS SANTOS"
          number: "5555555555554444"
      properties:
        payMethod:
          oneOf:
            - $ref: "#/components/schemas/CreditCard"
      required:
        - payMethod
      type: object
    Rubric:
      description: Rubric schema.
      oneOf:
        - $ref: "#/components/schemas/MultipleChoiceRubric"
        - $ref: "#/components/schemas/OpenAnswerRubric"
        - $ref: "#/components/schemas/FillTheBlanksRubric"
      type: object
    RubricBasicProperties:
      description: Basic properties of a rubric
      properties:
        id:
          $ref: "#/components/schemas/StringID"
        type:
          type: string
      required:
        - type
      type: object
    Specialist:
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/UserBasicProperties"
      description: Specialist's Schema
      example:
        id: id_Alex
        name: Alexandre Martins
        photoPath: https://i.imgur.com/FRwhrhG.jpg
    SpecialistWithoutId:
      additionalProperties: false
      description: Specialist's Schema. The user id is not required.
      example:
        name: Alexandre Martins
        photoPath: https://i.imgur.com/FRwhrhG.jpg
      properties:
        UserWithoutId:
          $ref: "#/components/schemas/UserWithoutId"
      required:
        - UserWithoutId
    StringID:
      maxLength: 24
      minLength: 24
      pattern: /^[a-f\d]{24}$/i
      type: string
    StringInput:
      description: The structure of accepted strings
      maxLength: 500
      minLength: 1
      pattern: ^[A-Za-z0-9]{3,10}$
      type: string
    Student:
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/StudentWithoutId"
      description: Student's Schema
      required:
        - id
    StudentSimplified:
      description: Simplified version of the student schema.
      properties:
        email:
          format: email
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    StudentWithoutId:
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/UserBasicProperties"
      description: Student's Schema. The user id is not required.
    Subscription:
      additionalProperties: false
      description: Subscription's schema.
      example:
        nextPayment: 11-09-2024
        payment:
          creditCard:
            cvv: "666"
            expirationDate: 11-09-2050
            name: GONCALO COUTO DOS SANTOS
            number: "5555555555554444"
        planId: planID
      properties:
        id:
          $ref: "#/components/schemas/StringID"
        nextPayment:
          format: DateTime
          type: string
        payment:
          $ref: "#/components/schemas/Payment"
        planId:
          $ref: "#/components/schemas/StringID"
      required:
        - planId
        - nextPayment
        - payment
      type: object
    SubscriptionPlan:
      additionalProperties: false
      description: Subscription Plan's schema.
      example:
        name: IDK yet
        perks:
          - perk1
        priceMonth: 100000.5
        targetAudience:
          - audience1
      properties:
        id:
          $ref: "#/components/schemas/StringID"
          nullable: true
        name:
          type: string
        perks:
          items:
            type: object
          type: array
        priceMonth:
          format: float
          type: number
        targetAudience:
          items:
            type: object
          type: array
      required:
        - name
        - targetAudience
        - perks
        - priceMonth
      type: object
    Tag:
      example:
        name: Algebra
        path: /Matematica/
      properties:
        id:
          $ref: "#/components/schemas/StringID"
        name:
          type: string
        path:
          type: string
      type: object
    Test:
      description: Schema of a test
      oneOf:
        - $ref: "#/components/schemas/BasicTest"
        - $ref: "#/components/schemas/DeliverDateTest"
        - $ref: "#/components/schemas/LiveTest"
    TestBasicProperties:
      description: Schema of a test
      properties:
        conclusion:
          type: string
        courseId:
          type: string
        creationDate:
          format: date-time
          type: string
        globalCotation:
          format: float
          type: number
        globalInstructions:
          type: string
        groups:
          items:
            $ref: "#/components/schemas/TestGroup"
          type: array
        id:
          type: string
        institutionId:
          type: string
        publishDate:
          format: date-time
          type: string
        specialistId:
          type: string
        title:
          type: string
        type:
          type: string
      required:
        - specialistId
        - institutionId
        - title
        - globalInstructions
        - globalCotation
        - conclusion
        - creationDate
        - publishDate
        - startDate
        - endDate
        - startTolerance
        - numberOfResubmissions
        - groups
      type: object
    TestGroup:
      description: Test group's schema.
      properties:
        exercises:
          items:
            oneOf:
              - $ref: "#/components/schemas/Exercise"
              - $ref: "#/components/schemas/ExerciseReference"
          type: array
        groupCotation:
          format: float
          type: number
        groupInstructions:
          type: string
      required:
        - groupCotation
        - exercises
      type: object
    TestResolution:
      description: Test resolution's schema.
      properties:
        groups:
          items:
            $ref: "#/components/schemas/TestResolutionGroup"
          type: array
        id:
          type: string
        startDate:
          format: date-time
          type: string
        status:
          enum:
            - ongoing
            - not_revised
            - revised
            - revision_ongoing
            - invalidated
          type: string
        studentId:
          type: string
        submissionDate:
          format: date-time
          type: string
        submissionNr:
          type: integer
        testId:
          type: string
      required:
        - id
      type: object
    TestResolutionGroup:
      description: Test resolution group's schema.
      properties:
        groupCotation:
          format: float
          type: number
        resolutions:
          items:
            $ref: "#/components/schemas/ExerciseResolution"
          type: array
      required:
        - groupCotation
      type: object
    User:
      additionalProperties: false
      description: Basic properties of an user.
      properties:
        id:
          $ref: "#/components/schemas/StringInput"
        name:
          $ref: "#/components/schemas/StringInput"
        photoPath:
          $ref: "#/components/schemas/StringInput"
      required:
        - id
        - name
      type: object
    UserBasicProperties:
      properties:
        description:
          example: descricao
          type: string
        email:
          example: luisinho2001@gmail.com
          format: email
          type: string
        id:
          type: string
        name:
          example: Luis Silva
          type: string
        photoPath:
          example: https://upload.wikimedia.org/wikipedia/commons/c/c7/Osama_bin_Laden%2C_portr%C3%A6t.jpg
          type: string
      type: object
    UserWithoutId:
      additionalProperties: false
      description: Basic properties of an user.
      properties:
        name:
          $ref: "#/components/schemas/StringInput"
        photoPath:
          $ref: "#/components/schemas/StringInput"
      required:
        - name
      type: object
    Visibility:
      enum:
        - public
        - not_listed
        - private
        - course
        - institution
      type: string
info:
  title: Chalk - Test Your Knowledge
  version: 1.0.0
openapi: 3.0.3
paths:
  /courses:
    get:
      parameters:
        - description: "Find the courses this student belongs to.

            "
          in: query
          name: studentId
          schema:
            $ref: "#/components/schemas/StringInput"
        - description: "Find the courses this specialist belongs to.

            "
          in: query
          name: specialistId
          schema:
            $ref: "#/components/schemas/StringInput"
        - description: "Find the courses of this institution.

            "
          in: query
          name: institutionId
          schema:
            $ref: "#/components/schemas/StringInput"
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: false
                items:
                  $ref: "#/components/schemas/Course"
                type: array
          description: successful operation
        "400":
          description: Either 'studentId' or 'specialistId' or 'institution' are required.
        "401":
          description: Unauthorized operation
      tags:
        - course
    post:
      description: This method is used to create an course
      requestBody:
        content:
          application/json:
            schema:
              properties:
                course:
                  $ref: "#/components/schemas/CourseWithoutId"
              required:
                - course
              type: object
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized operation
      summary: Create course
      tags:
        - course
  /courses/{courseId}:
    delete:
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid coursename supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Course not found
      summary: Delete course
      tags:
        - course
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseWithoutId"
          description: successful operation
        "400":
          description: Invalid course id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Course not found
      summary: Get course by course id
      tags:
        - course
    parameters:
      - description: Course identifier
        in: path
        name: courseId
        required: true
        schema:
          $ref: "#/components/schemas/StringInput"
    put:
      description: Update an existent course in the store
      requestBody:
        content:
          application/json:
            schema:
              properties:
                course:
                  $ref: "#/components/schemas/CourseWithoutId"
              required:
                - course
              type: object
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid course id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Course not found
      summary: Update course
      tags:
        - course
  /exercises:
    get:
      description: Retrieves exercises that match the given filters.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
        - description:
            Array of identifiers from the tags that will be used to filter
            the exercises.
          in: query
          name: tags
          required: false
          schema:
            default: []
            items:
              $ref: "#/components/schemas/StringID"
            type: array
        - description:
            Value that defines if the exercise must have all the given tags
            to be retrieved.
          in: query
          name: matchAllTags
          required: false
          schema:
            default: false
            type: boolean
        - description:
            "Describes the type of visibility that the exercises must have.\
            \ \nThis parameter must be paired with the parameter 'visibilityTarget'\
            \ \nwhen the value is either 'institution' or 'course'.\n"
          in: query
          name: visibilityType
          schema:
            default: public
            enum:
              - public
              - institution
              - course
            type: string
        - description:
            "Identifier of the visibility target. For example, if visibilityType='institution',\
            \ \nthen this parameter is the identifier of the institution.\n"
          in: query
          name: visibilityTarget
          required: false
          schema:
            type: string
        - description:
            Identifier of the specialist. Used when we want to retrieve the
            exercises created by a specific specialist.
          in: query
          name: specialistId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Exercise"
                type: array
          description: Successful retrieval.
        "401":
          description:
            "Unauthorized operation. Example: When trying to access exercises
            from a specific course that the user does not belong to."
      summary: Retrieve exercises.
      tags:
        - exercises
    post:
      description:
        This method is used to create an exercise regardless of its type.
        Check the request body schema to understand how to create the different exercises.
      requestBody:
        content:
          application/json:
            schema:
              description:
                If a rubric and a solution are provided, their type must
                match the type of the exercise.
              properties:
                exercise:
                  $ref: "#/components/schemas/ExerciseWithoutId"
                rubric:
                  $ref: "#/components/schemas/Rubric"
                solution:
                  $ref: "#/components/schemas/ExerciseSolution"
                tagsIds:
                  items:
                    example: "12345"
                    type: string
                  type: array
                visibility:
                  $ref: "#/components/schemas/Visibility"
              required:
                - visibility
                - exercise
                - tagsIds
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: identifier of the new exercise
                type: string
          description: Exercise created successfully.
        "400":
          description: Bad input.
        "401":
          description: Unauthorized operation.
      summary: Create an exercise
      tags:
        - exercises
  /exercises/resolutions/{resolutionId}:
    get:
      parameters:
        - description: Exercise resolution identifier
          in: path
          name: resolutionId
          required: true
          schema:
            example: resolution1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExerciseResolution"
          description: Successful retrieval.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise resolution not found.
      summary: Get exercise resolution using its id.
      tags:
        - exercises
  /exercises/resolutions/{resolutionId}/comment:
    post:
      parameters:
        - description: Exercise resolution identifier
          in: path
          name: resolutionId
          required: true
          schema:
            example: resolution1
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      responses:
        "200":
          description: Success.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise resolution not found.
      summary: Add comment to a resolution
      tags:
        - exercises
  /exercises/resolutions/{resolutionId}/manual-correction:
    post:
      parameters:
        - in: path
          name: resolutionId
          required: true
          schema:
            type: string
        - in: query
          name: cotation
          required: true
          schema:
            format: float
            type: number
      responses:
        "200":
          description: Success.
        "401":
          description: Unauthorized operation.
        "404":
          description: Resolution not found.
      summary: To set the cotation of an exercise resolution manually.
      tags:
        - exercises
  /exercises/rubrics/{rubricId}:
    delete:
      parameters:
        - description: rubric identifier
          in: path
          name: rubricId
          required: true
          schema:
            example: rubric1
            type: string
      responses:
        "200":
          description: Deletion successful.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise does not exist.
      summary: Delete the exercise rubric.
      tags:
        - exercises
    put:
      parameters:
        - description: rubric identifier
          in: path
          name: rubricId
          required: true
          schema:
            example: rubric1
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rubric"
        required: true
      responses:
        "200":
          description: Rubric created successfully.
        "400":
          description: Malformed request. Rubric may not be the correct type.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise does not exist.
      summary: Update the rubric.
      tags:
        - exercises
  /exercises/tag:
    get:
      description:
        "Retrieves the tags used to characterize the exercises. \nA path\
        \ or paths can be given to define where the retrieval of tags should start.\
        \ \nA number of levels can also be provided to inform how much depth the retrieval\
        \ should cover.\n"
      parameters:
        - description: Array of paths from which the tags should be retrieved.
          in: query
          name: paths
          required: false
          schema:
            default:
              - /
            items:
              type: string
            type: array
        - description:
            Number of levels, starting from the given paths that should be
            retrieved. -1 to retrieve every tag starting at the given paths.
          in: query
          name: levels
          required: false
          schema:
            default: -1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Tag"
                type: array
          description: Tags retrieved successfully.
      summary: Retrieve tags.
      tags:
        - exercises
  /exercises/{exerciseId}:
    delete:
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
      responses:
        "200":
          description: Exercise deleted successfully.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise not found.
      summary: Delete exercise by its id.
      tags:
        - exercises
    put:
      description: This method is used to update an existing exercise. Check the schema
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description:
                If a rubric and a solution are provided, their type must
                match the type of the exercise. The given properties will be updated.
                The hidden properties will not be modified. If a property is null,
                then it is considered that it should be deleted.
              properties:
                exercise:
                  $ref: "#/components/schemas/ExerciseWithoutId"
                rubric:
                  $ref: "#/components/schemas/Rubric"
                solution:
                  $ref: "#/components/schemas/ExerciseSolution"
                tagsIds:
                  items:
                    example: "12345"
                    type: string
                  type: array
                visibility:
                  $ref: "#/components/schemas/Visibility"
              type: object
        required: true
      responses:
        "200":
          description: Exercise updated successfully.
        "400":
          description: Bad input.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise not found.
      summary: Update an exercise
      tags:
        - exercises
  /exercises/{exerciseId}/duplicate:
    post:
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: identifier of the new exercise
                type: string
          description: Successful duplication.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise with the given id does not exist.
      summary: Duplicates the exercise using its identifier.
      tags:
        - exercises
  /exercises/{exerciseId}/resolutions:
    get:
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    resolution:
                      $ref: "#/components/schemas/ExerciseResolution"
                    student:
                      $ref: "#/components/schemas/StudentSimplified"
                  type: object
                type: array
          description: Successful retrieval.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise not found.
      summary: Get all exercise resolutions.
      tags:
        - exercises
    post:
      parameters:
        - in: path
          name: exerciseId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseResolution"
        required: true
      responses:
        "200":
          description: Exercise resolution created successfully.
        "401":
          description: Unauthorized operation.
        "404":
          description: Could not find any exercise with the given id.
      summary: Create an exercise resolution
      tags:
        - exercises
  /exercises/{exerciseId}/resolutions/correction:
    put:
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
        - description:
            "Type of correction. The correction can either be automatic or
            done by AI.

            For a given exercise, it may support either, both, or none of the correction
            types.

            "
          in: query
          name: correctionType
          schema:
            enum:
              - auto
              - ai
            type: string
      responses:
        "200":
          description: Success.
        "400":
          description:
            The requested type of correction is not supported for the given
            exercise.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise not found.
      summary: Issue the automatic correction of the exercise resolutions.
      tags:
        - exercises
  /exercises/{exerciseId}/resolutions/count:
    get:
      description:
        "Retrieves the number of students that submitted a resolution for\
        \ a specific exercise. \nThe total number of  submissions can be obtained\
        \ by setting the 'total' query parameter to 'true'.\n"
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
        - description:
            "'false' to count the number of students that made a submission.
            'true' to count the total number of submissions."
          in: query
          name: total
          required: false
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: Successful retrieval.
        "404":
          description: Exercise not found.
      summary:
        Retrieves the number of students that submitted a resolution for a
        specific exercise.
      tags:
        - exercises
  /exercises/{exerciseId}/resolutions/{studentId}/count:
    get:
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
        - description: student identifier
          in: path
          name: studentId
          required: true
          schema:
            example: student1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: Successful retrieval.
        "404":
          description: Exercise not found.
      summary:
        Retrieves the number of (resolution) submissions a student has made
        for a specific exercise.
      tags:
        - exercises
  /exercises/{exerciseId}/resolutions/{studentId}/ids:
    get:
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
        - description: student identifier
          in: path
          name: studentId
          required: true
          schema:
            example: student1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  description: id of a resolution
                  type: string
                type: array
          description: Success.
        "401":
          description: Unauthorized operation.
      summary:
        Get the list of identifiers of the student's resolutions for the given
        exercise.
      tags:
        - exercises
  /exercises/{exerciseId}/resolutions/{studentId}/last:
    get:
      parameters:
        - in: path
          name: exerciseId
          required: true
          schema:
            type: string
        - in: path
          name: studentId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExerciseResolution"
                nullable: false
          description: Success.
        "401":
          description: Unauthorized operation.
        "404":
          description: Not found.
      summary: Get latest exercise resolution made by the student.
      tags:
        - exercises
  /exercises/{exerciseId}/rubric:
    get:
      description:
        Retrieve exercise rubric. 'null' is returned if a rubric does not
        exist.
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rubric"
                nullable: true
          description: Retrieval successful.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise does not exist.
      summary: Retrieve exercise rubric.
      tags:
        - exercises
    post:
      parameters:
        - description: Exercise identifier
          in: path
          name: exerciseId
          required: true
          schema:
            example: exercise1
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/MultipleChoiceRubric"
                - $ref: "#/components/schemas/OpenAnswerRubric"
                - $ref: "#/components/schemas/FillTheBlanksRubric"
        required: true
      responses:
        "200":
          description: Rubric created successfully.
        "401":
          description: Unauthorized operation.
        "404":
          description: Exercise does not exist.
      summary: Create a rubric for an exercise.
      tags:
        - exercises
  /institutions:
    get:
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Institution"
                type: array
          description: successful operation
        "400":
          description: page and itemsPerPage are required
        "401":
          description: Unauthorized operation
      summary: Get page of institutions.
      tags:
        - institution
    post:
      description: This method is used to create an institution
      requestBody:
        content:
          application/json:
            schema:
              properties:
                institution:
                  $ref: "#/components/schemas/InstitutionWithoutId"
              required:
                - institution
              type: object
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized operation
      summary: Create institution
      tags:
        - institution
  /institutions/{institutionId}:
    delete:
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid institution supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Institution not found
      summary: Delete institution
      tags:
        - institution
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstitutionWithoutId"
          description: successful operation
        "400":
          description: Invalid institution id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Institution not found
      summary: Get institution by institution id
      tags:
        - institution
    parameters:
      - description: Institution identifier
        in: path
        name: institutionId
        required: true
        schema:
          $ref: "#/components/schemas/StringInput"
    put:
      description: Update an existent institution in the store
      requestBody:
        content:
          application/json:
            schema:
              properties:
                institution:
                  $ref: "#/components/schemas/InstitutionWithoutId"
              required:
                - institution
              type: object
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid institution supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Institution not found
      summary: Update Institution
      tags:
        - institution
  /subscriptions:
    get:
      description: Returns all the subscription plans.
      parameters:
        - description: "Finds the specialist subscription.

            "
          in: query
          name: specialistId
          schema:
            $ref: "#/components/schemas/StringInput"
        - description: "Finds the student subscription.

            "
          in: query
          name: studentId
          schema:
            $ref: "#/components/schemas/StringInput"
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SubscriptionPlan"
                type: array
          description: successful operation
        "401":
          description: Unauthorized operation
      tags:
        - subscription
    post:
      description: This method is used to create a new subsctiption plan
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                subscriptionPlan:
                  $ref: "#/components/schemas/SubscriptionPlan"
              required:
                - subscriptionPlan
              type: object
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized operation
      summary: Create subscription plan
      tags:
        - subscription
  /subscriptions/institutions:
    post:
      description: This method is used to create a new subsctiption for a institution
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                institutionId:
                  $ref: "#/components/schemas/StringID"
                subscription:
                  $ref: "#/components/schemas/Subscription"
              required:
                - SubscriptionWithPlan
                - InstitutionId
              type: object
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized operation
      summary: Create subscription for a institution
      tags:
        - subscription
  /subscriptions/institutions/{institutionId}:
    delete:
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid institution id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Institution not found
      summary: Delete subscription from institution
      tags:
        - subscription
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Successful operation
        "400":
          description: Invalid institution id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Institution not found
      summary: Get subscription by institution id.
      tags:
        - subscription
    parameters:
      - description: Institution identifier
        in: path
        name: institutionId
        required: true
        schema:
          $ref: "#/components/schemas/StringID"
          example: uminho
    put:
      description: Update an existent subscription in the store
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                SubscriptionWithPlan:
                  $ref: "#/components/schemas/Subscription"
              required:
                - SubscriptionWithPlan
              type: object
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid institution id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Institution not found
        "405":
          description: This method is only for update, use the post method.
      summary: Update institution subscription
      tags:
        - subscription
  /subscriptions/specialists:
    post:
      description: This method is used to create a new subsctiption for a specialist
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                SubscriptionWithPlan:
                  $ref: "#/components/schemas/Subscription"
                specialistId:
                  $ref: "#/components/schemas/StringID"
              required:
                - SubscriptionWithPlan
                - SpecialistId
              type: object
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized operation
      summary: Create subscription for a specialist
      tags:
        - subscription
  /subscriptions/specialists/{specialistId}:
    delete:
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid specialist id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Specialist not found
      summary: Delete subscription from specialist
      tags:
        - subscription
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Successful operation
        "400":
          description: Invalid specialist id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Specialist not found
      summary: Get subscription by specialist id.
      tags:
        - subscription
    parameters:
      - description: Specialist identifier
        in: path
        name: specialistId
        required: true
        schema:
          $ref: "#/components/schemas/StringInput"
          example: uminho
    put:
      description: Update an existent subscription in the store
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                SubscriptionWithPlan:
                  $ref: "#/components/schemas/Subscription"
              required:
                - SubscriptionWithPlan
              type: object
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid specialist id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Specialist not found
        "405":
          description: This method is only for update, use the post method.
      summary: Update specialist subscription
      tags:
        - subscription
  /subscriptions/students:
    post:
      description: This method is used to create a new subsctiption for a student
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                SubscriptionWithPlan:
                  $ref: "#/components/schemas/Subscription"
                studentId:
                  $ref: "#/components/schemas/StringID"
              required:
                - SubscriptionWithPlan
                - StudentId
              type: object
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized operation
      summary: Create subscription for a student
      tags:
        - subscription
  /subscriptions/students/{studentId}:
    delete:
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid student id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Student not found
      summary: Delete subscription
      tags:
        - subscription
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
          description: Successful operation
        "400":
          description: Invalid student id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Student not found
      summary: Get subscription by student id.
      tags:
        - subscription
    parameters:
      - description: Student identifier
        in: path
        name: studentId
        required: true
        schema:
          $ref: "#/components/schemas/StringID"
          example: uminho
    put:
      description: Update an existent subscription in the store
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                SubscriptionWithPlan:
                  $ref: "#/components/schemas/Subscription"
              required:
                - SubscriptionWithPlan
              type: object
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid student id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Student not found
        "405":
          description: This method is only for update, use the post method.
      summary: Update student subscription
      tags:
        - subscription
  /subscriptions/{subscriptionPlanId}:
    delete:
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid subscription plan identifier supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Subscription plan not found
        "405":
          description: The subsctiption plan cannot be deleted because its being used.
      summary: Delete subscription plan
      tags:
        - subscription
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionPlan"
          description: Successful operation
        "400":
          description: Invalid user id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: User not found
      summary: Get subscription plan by subscription plan id
      tags:
        - subscription
    parameters:
      - description: Subscription Plan identifier
        in: path
        name: subscriptionPlanId
        required: true
        schema:
          $ref: "#/components/schemas/StringInput"
          example: uminhoDefaultPlan01
    put:
      description: Update an existent subscription plan in the store
      requestBody:
        content:
          application/json:
            schema:
              properties:
                exercise:
                  $ref: "#/components/schemas/SubscriptionPlan"
              type: object
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid subscription plan id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: Subscription plan not found
      summary: Update subscription plan
      tags:
        - subscription
  /tests:
    get:
      description: Retrieves tests that match the given filters.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
        - description:
            Array of identifiers from the tags that will be used to filter
            the tests.
          in: query
          name: tags
          required: false
          schema:
            default: []
            items:
              type: integer
            type: array
        - description:
            Value that defines if the exercise must have all the given tags
            to be retrieved.
          in: query
          name: matchAllTags
          required: false
          schema:
            default: false
            type: boolean
        - description:
            "Describes the type of visibility that the tests must have. \n\
            This parameter must be paired with the parameter 'visibilityTarget' \nwhen\
            \ the value is either 'institution' or 'course'.\n"
          in: query
          name: visibilityType
          schema:
            default: public
            enum:
              - public
              - institution
              - course
            type: string
        - description:
            "Identifier of the visibility target. For example, if visibilityType='institution',\
            \ \nthen this parameter is the identifier of the institution.\n"
          in: query
          name: visibilityTarget
          required: false
          schema:
            type: string
        - in: query
          name: specialistId
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Test"
                type: array
          description: Successful retrieval.
        "401":
          description:
            "Unauthorized operation. Example: When trying to access tests
            from a specific course that the user does not belong to."
      summary: Retrieve tests.
      tags:
        - tests
    post:
      parameters:
        - in: query
          name: visibility
          required: true
          schema:
            $ref: "#/components/schemas/Visibility"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: identifier of the new test
                type: string
          description: Success.
        "400":
          description: Bad input.
        "401":
          description: Unauthorized operation.
      summary: Create a test
      tags:
        - tests
  /tests/resolutions/{resolutionId}:
    get:
      parameters:
        - description: Test resolution identifier
          in: path
          name: resolutionId
          required: true
          schema:
            example: resolution1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestResolution"
          description: Successful retrieval.
        "401":
          description: Unauthorized operation.
        "404":
          description: Test resolution not found.
      summary: Get test resolution using its id.
      tags:
        - tests
  /tests/{testId}:
    delete:
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
      responses:
        "200":
          description: Test deleted successfully.
        "401":
          description: Unauthorized operation.
        "404":
          description: Test not found.
      summary: Delete test by its id.
      tags:
        - tests
    put:
      description: This method is used to update an existing test. Check the schema
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
        required: true
      responses:
        "204":
          description: Test updated successfully.
        "400":
          description: Bad input.
        "401":
          description: Unauthorized operation.
        "404":
          description: Test not found.
      summary: Update a test
      tags:
        - tests
  /tests/{testId}/duplicate:
    post:
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: identifier of the duplicated test
                type: string
          description: Successful duplication.
        "401":
          description: Unauthorized operation.
        "404":
          description: Test with the given id does not exist.
      summary: Duplicates the test using its identifier.
      tags:
        - tests
  /tests/{testId}/resolutions:
    get:
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    resolution:
                      $ref: "#/components/schemas/TestResolution"
                    student:
                      $ref: "#/components/schemas/StudentSimplified"
                  type: object
                type: array
          description: Successful retrieval.
        "401":
          description: Unauthorized operation.
        "404":
          description: Test not found.
      summary: Get all test resolutions.
      tags:
        - tests
    post:
      parameters:
        - in: path
          name: testId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestResolution"
        required: true
      responses:
        "200":
          description: Test resolution created successfully.
        "401":
          description: Unauthorized operation.
        "404":
          description: Could not find any test with the given id.
      summary: Create a test resolution
      tags:
        - tests
  /tests/{testId}/resolutions/correction:
    put:
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
        - description:
            "Type of correction. The correction can either be automatic or
            done by AI.

            When using AI correction, the AI will only be used to correct questions
            that

            cannot be corrected automatically, i.e., by using the solution.

            "
          in: query
          name: correctionType
          schema:
            enum:
              - auto
              - ai
            type: string
      responses:
        "200":
          description: Success.
        "401":
          description: Unauthorized operation.
        "404":
          description: Test not found.
      summary: Issue the automatic correction of the test resolutions.
      tags:
        - tests
  /tests/{testId}/resolutions/count:
    get:
      description:
        "- Retrieves the number of students that submitted a resolution\
        \ for a specific test. \nThe total number of submissions can be obtained by\
        \ setting the 'total' query parameter to 'true'.\n"
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
        - description:
            "'false' to count the number of students that made a submission.
            'true' to count the total number of submissions."
          in: query
          name: total
          required: false
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: Successful retrieval.
        "404":
          description: Test not found.
      summary:
        Retrieves the number of students that submitted a resolution for a
        specific test.
      tags:
        - tests
  /tests/{testId}/resolutions/{studentId}/can-submit:
    get:
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
        - description: student identifier
          in: path
          name: studentId
          required: true
          schema:
            example: student1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: Successful retrieval.
        "404":
          description: Test not found.
      summary: Allows to check if the student can submit a resolution for the test.
      tags:
        - tests
  /tests/{testId}/resolutions/{studentId}/count:
    get:
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
        - description: student identifier
          in: path
          name: studentId
          required: true
          schema:
            example: student1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: Successful retrieval.
        "404":
          description: Test not found.
      summary:
        Retrieves the number of (resolution) submissions a student has made
        for a specific test.
      tags:
        - tests
  /tests/{testId}/resolutions/{studentId}/ids:
    get:
      parameters:
        - description: Test identifier
          in: path
          name: testId
          required: true
          schema:
            example: test1
            type: string
        - description: student identifier
          in: path
          name: studentId
          required: true
          schema:
            example: student1
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  description: id of a resolution
                  type: string
                type: array
          description: Success.
        "401":
          description: Unauthorized operation.
      summary:
        Get the list of identifiers of the student's resolutions for the given
        test.
      tags:
        - tests
  /tests/{testId}/resolutions/{studentId}/last:
    get:
      parameters:
        - in: path
          name: testId
          required: true
          schema:
            type: string
        - in: path
          name: studentId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestResolution"
                nullable: false
          description: Success.
        "401":
          description: Unauthorized operation.
        "404":
          description: Not found.
      summary: Get latest test resolution made by the student.
      tags:
        - tests
  /users:
    get:
      parameters:
        - description: Find users from this institution.
          in: query
          name: institution
          schema:
            $ref: "#/components/schemas/StringInput"
        - description: Find users from this course (institution is required).
          in: query
          name: course
          schema:
            $ref: "#/components/schemas/StringInput"
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  anyOf:
                    - $ref: "#/components/schemas/Student"
                    - $ref: "#/components/schemas/Specialist"
                    - $ref: "#/components/schemas/InstitutionManager"
                type: array
          description: successful operation
        "400":
          description: Either 'institution' or 'course'+'institution' are required.
        "401":
          description: Unauthorized operation
      tags:
        - user
    post:
      description: This method is used to create an user regardless of its type.
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                user:
                  oneOf:
                    - $ref: "#/components/schemas/StudentWithoutId"
                    - $ref: "#/components/schemas/SpecialistWithoutId"
                    - $ref: "#/components/schemas/InstitutionManagerWithoutId"
              required:
                - user
              type: object
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized operation
      summary: Create user
      tags:
        - user
    put:
      description: Update an existent user in the store
      parameters:
        - in: cookie
          name: userId
          required: false
          schema:
            $ref: "#/components/schemas/StringInput"
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                user:
                  oneOf:
                    - $ref: "#/components/schemas/StudentWithoutId"
                    - $ref: "#/components/schemas/SpecialistWithoutId"
                    - $ref: "#/components/schemas/InstitutionManagerWithoutId"
              required:
                - user
              type: object
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid user id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: User not found
      summary: Update user
      tags:
        - user
  /users/managers:
    get:
      parameters:
        - description: "Find managers from this institution.

            "
          in: query
          name: institutionId
          schema:
            $ref: "#/components/schemas/StringInput"
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/InstitutionManager"
                type: array
          description: successful operation
        "400":
          description: The 'institutionId+page+itemsPerPage' is required.
        "401":
          description: Unauthorized operation
      tags:
        - user
  /users/specialists:
    get:
      parameters:
        - description: "Find the specialists that are the owners of the test.

            "
          in: query
          name: testId
          schema:
            $ref: "#/components/schemas/StringInput"
        - description: "Find specialists from this institution.

            "
          in: query
          name: institutionId
          schema:
            $ref: "#/components/schemas/StringInput"
        - description:
            "Find specialists from this course (institution is required).

            "
          in: query
          name: courseId
          schema:
            $ref: "#/components/schemas/StringInput"
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          required: true
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Specialist"
                type: array
          description: successful operation
        "400":
          description:
            Either 'institutionId+page+itemsPerPage' or 'courseId+institutionId+page+itemsPerPage'
            or 'testId+page+itemsPerPage' are required.
        "401":
          description: Unauthorized operation
      tags:
        - user
  /users/students:
    get:
      parameters:
        - description: "Find the student that is the owner of the resoluton.

            "
          in: query
          name: testResolutionId
          schema:
            $ref: "#/components/schemas/StringInput"
        - description: "Find the student that is the owner of the resoluton.

            "
          in: query
          name: exerciseResolutionId
          schema:
            $ref: "#/components/schemas/StringInput"
        - description: "Find students from this institution.

            "
          in: query
          name: institutionId
          schema:
            $ref: "#/components/schemas/StringInput"
        - description:
            "Find students from this course (institution is required).

            "
          in: query
          name: courseId
          schema:
            $ref: "#/components/schemas/StringInput"
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: itemsPerPage
          schema:
            maximum: 50
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Student"
                type: array
          description: successful operation
        "400":
          description:
            Either 'institutionId+page+itemsPerPage' or 'courseId'+'institutionId+page+itemsPerPage'
            or 'testResolutionId' or 'exerciseResolutionId' are required.
        "401":
          description: Unauthorized operation
      tags:
        - user
  /users/{userId}:
    delete:
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid username supplied
        "401":
          description: Unauthorized operation
        "404":
          description: User not found
      summary: Delete user
      tags:
        - user
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Student"
                  - $ref: "#/components/schemas/Specialist"
                  - $ref: "#/components/schemas/InstitutionManager"
          description: successful operation
        "400":
          description: Invalid user id supplied
        "401":
          description: Unauthorized operation
        "404":
          description: User not found
      summary: Get user by user id
      tags:
        - user
    parameters:
      - description: User identifier
        in: path
        name: userId
        required: true
        schema:
          $ref: "#/components/schemas/StringInput"
          example: user1
servers:
  - url: https://localhost:8080/v1/
